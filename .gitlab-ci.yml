#
# i-Parapheur Web
# Copyright (C) 2019-2022 Libriciel-SCOP
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

stages:
  - test
  - package
  - publish
  - deploy
  - e2e-tests

variables: &global-variables
  PACKAGE_NAME: iparapheur-${CI_COMMIT_REF_NAME}
  PACKAGE_NAME_WITH_EXTENSION: ${PACKAGE_NAME}.tar.gz
  IPARAPHEUR_DOCKER_ELEMENTS_PATH: "/opt/iParapheur"
  OVERRIDE_DOCKER_COMPOSE_FILE_DEV: "docker-compose.override.dev.yml"
  OVERRIDE_DOCKER_COMPOSE_FILE_ACCEPTANCE: "docker-compose.override.tests-linux.yml"
  INIT_SCRIPT: "ip5-compose-dev.sh"
  NIGHTLY: "FALSE"

.e2e-test-config:
  variables: &e2e-test-config
    <<: *global-variables
    TARGETED_ENVIRONNEMENT_URL: ${E2E_TESTS_TARGET_SERVER_URL}
    TARGETED_ENVIRONNEMENT_USER: ${E2E_TESTS_TARGET_SERVER_USER}
    SSH_PRIVATE_KEY_B64: ${E2E_TESTS_SSH_PRIVATE_KEY_B64}
    OVERRIDE_DOCKER_COMPOSE_FILE: ${OVERRIDE_DOCKER_COMPOSE_FILE_ACCEPTANCE}
    RESET_DATA: 1

.acceptance-config:
  variables: &acceptance-config
    <<: *global-variables
    TARGETED_ENVIRONNEMENT_URL: ${ACCEPTANCE_TARGET_SERVER_URL}
    TARGETED_ENVIRONNEMENT_USER: ${ACCEPTANCE_TARGET_SERVER_USER}
    SSH_PRIVATE_KEY_B64: ${ACCEPTANCE_SSH_PRIVATE_KEY_B64}
    RESET_DATA: 0
    OVERRIDE_DOCKER_COMPOSE_FILE: ${OVERRIDE_DOCKER_COMPOSE_FILE_ACCEPTANCE}

.dev-config:
  variables: &dev-config
    <<: *global-variables
    TARGETED_ENVIRONNEMENT_URL: ${DEV_TARGET_SERVER_URL}
    TARGETED_ENVIRONNEMENT_USER: ${DEV_TARGET_SERVER_USER}
    SSH_PRIVATE_KEY_B64: ${DEV_SSH_PRIVATE_KEY_B64}
    OVERRIDE_DOCKER_COMPOSE_FILE: ${OVERRIDE_DOCKER_COMPOSE_FILE_DEV}
    RESET_DATA: 1

# <editor-fold desc="Package">

.prepare-package: &prepare-package
  script:
    - echo -e "üì¶üì¶üì¶ \e[42mPackaging ${PACKAGE_NAME}\e[0m üì¶üì¶üì¶"
    - packageFiles=(
      "docker-compose.yml"
      "docker-compose.ipng.yml"
      "docker-compose.override.init.yml"
      ".env.dist"
      "LICENSE.md"
      "README.md"
      "src/main/resources/nginx/iparapheur.conf.template"
      "src/main/resources/nginx/iparapheur.init.conf.template"
      "src/main/resources/content"
      "src/main/resources/postgres/docker-entrypoint-initdb.d"
      "src/main/resources/keycloak"
      "src/main/resources/prometheus/alert.rules"
      "src/main/resources/prometheus/prometheus.yml"
      "src/main/resources/rgpd/rgpd-template.json"
      "src/main/resources/vault"
      )
    - tar cfz ${PACKAGE_NAME_WITH_EXTENSION} --files-from <(printf "%s\n" "${packageFiles[@]}")

package_prod:
  stage: package
  only: [ tags ]
  <<: *prepare-package
  artifacts:
    name: ${PACKAGE_NAME}
    paths:
      - ${PACKAGE_NAME_WITH_EXTENSION}

package:
  stage: package
  except: [ tags ]
  <<: *prepare-package
  artifacts:
    name: ${PACKAGE_NAME}
    paths:
      - ${PACKAGE_NAME_WITH_EXTENSION}
    expire_in: 30 days

# </editor-fold desc="Package">

# <editor-fold desc="Publish">

.publish-package: &publish-package
  script:
    - echo "Publishing ${PACKAGE_NAME_WITH_EXTENSION} to https://${NEXUS_HOST}/repository/${NEXUS_FINAL_PATH}/${PACKAGE_NAME_WITH_EXTENSION}"
    - curl -v -u ${REGISTRY_CONTAINER_USER}:${REGISTRY_CONTAINER_PASSWORD} --upload-file ${PACKAGE_NAME_WITH_EXTENSION} https://${NEXUS_HOST}/repository/${NEXUS_FINAL_PATH}/${PACKAGE_NAME_WITH_EXTENSION}

publish_prod:
  stage: publish
  only: [ tags ]
  <<: *publish-package
  variables:
    NEXUS_FINAL_PATH: ${NEXUS_PUBLIC_PATH}

publish:
  stage: publish
  except: [ tags ]
  <<: *publish-package
  when: manual
  variables:
    NEXUS_FINAL_PATH: ${NEXUS_PRIVATE_PATH}

# </editor-fold desc="Publish">

# <editor-fold desc="Deploy">

.preparing-ssh: &preparing-ssh
  - echo -e "üïµüèΩ \e[46mPreparing ssh agent\e[0m üïµüèΩ"
  - eval $(ssh-agent -s)
  - ssh-add <(echo "${SSH_PRIVATE_KEY_B64}" | base64 --decode)
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'

.copying-deployment-files: &copying-deployment-files
  - echo -e "üì§ \e[46mCopying and extracting ${PACKAGE_NAME_WITH_EXTENSION}, ${INIT_SCRIPT} and ${OVERRIDE_DOCKER_COMPOSE_FILE} to ${TARGETED_ENVIRONNEMENT_USER}@${TARGETED_ENVIRONNEMENT_URL}:${IPARAPHEUR_DOCKER_ELEMENTS_PATH}/\e[0m üì§"
  - scp ./${PACKAGE_NAME_WITH_EXTENSION} ${TARGETED_ENVIRONNEMENT_USER}@${TARGETED_ENVIRONNEMENT_URL}:${IPARAPHEUR_DOCKER_ELEMENTS_PATH}/${PACKAGE_NAME_WITH_EXTENSION}
  - ${APPLY_COMMAND} "sudo tar -xf ${IPARAPHEUR_DOCKER_ELEMENTS_PATH}/${PACKAGE_NAME_WITH_EXTENSION} --directory ${IPARAPHEUR_DOCKER_ELEMENTS_PATH}"
  - scp ./${INIT_SCRIPT} ${TARGETED_ENVIRONNEMENT_USER}@${TARGETED_ENVIRONNEMENT_URL}:${IPARAPHEUR_DOCKER_ELEMENTS_PATH}/${INIT_SCRIPT}
  - ${APPLY_COMMAND} "sudo chmod 770 ${IPARAPHEUR_DOCKER_ELEMENTS_PATH}/${INIT_SCRIPT}"
  - ${APPLY_COMMAND} "sudo chgrp deployment ${IPARAPHEUR_DOCKER_ELEMENTS_PATH}/${INIT_SCRIPT}"
  - scp ./${OVERRIDE_DOCKER_COMPOSE_FILE} ${TARGETED_ENVIRONNEMENT_USER}@${TARGETED_ENVIRONNEMENT_URL}:${IPARAPHEUR_DOCKER_ELEMENTS_PATH}/${OVERRIDE_DOCKER_COMPOSE_FILE}

.deploying-app: &deploying-app
  - echo -e "üöÄ \e[46mDeploying application using ${OVERRIDE_DOCKER_COMPOSE_FILE}\e[0m üöÄ"
  - ${APPLY_COMMAND} "cd ${IPARAPHEUR_DOCKER_ELEMENTS_PATH} && docker-compose down --volumes --remove-orphan"
  - ${APPLY_COMMAND} "docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}"
  - ${APPLY_COMMAND} "cd ${IPARAPHEUR_DOCKER_ELEMENTS_PATH} && docker-compose -f docker-compose.yml -f ${OVERRIDE_DOCKER_COMPOSE_FILE} pull"
  - if [[ ${RESET_DATA} == 1 ]]; then ${APPLY_COMMAND} "cd ${IPARAPHEUR_DOCKER_ELEMENTS_PATH} && sudo ${IPARAPHEUR_DOCKER_ELEMENTS_PATH}/${INIT_SCRIPT} setup --force --ignore-override-compose --dont-start-app"; fi
  - ${APPLY_COMMAND} "cd ${IPARAPHEUR_DOCKER_ELEMENTS_PATH} && docker-compose -f docker-compose.yml -f ${OVERRIDE_DOCKER_COMPOSE_FILE} up -d"
  - echo -e "‚åõÔ∏èÔ∏è \e[46mWaiting for the application to be up\e[0m ‚è≥"
  - x=1; while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' https://${TARGETED_ENVIRONNEMENT_URL}/api/actuator/info)" != "200" && $x -le 60 ]]; do sleep 5; echo ‚åõÔ∏èÔ∏è $(( x++ )) ‚è≥; done || false
  - if [[ "$(curl -s -o /dev/null -w ''%{http_code}'' https://${TARGETED_ENVIRONNEMENT_URL}/api/actuator/info)" != "200" ]]; then echo -e "‚ù§Ô∏è‚Äçü©π‚ù§Ô∏è‚Äçü©π‚ù§Ô∏è‚Äçü©π \e[41mApplication not started\e[0m ‚ù§Ô∏è‚Äçü©π‚ù§Ô∏è‚Äçü©π‚ù§Ô∏è‚Äçü©π"; exit 1; fi

.deploy-job:
  variables:
    APPLY_COMMAND: "ssh -tt ${TARGETED_ENVIRONNEMENT_USER}@${TARGETED_ENVIRONNEMENT_URL}"
  needs: [ package ]
  before_script:
    - echo -e "üöÄüöÄüöÄ \e[42mDeploying ${CI_COMMIT_REF_NAME} on ${TARGETED_ENVIRONNEMENT_URL} with user ${TARGETED_ENVIRONNEMENT_USER}\e[0m üöÄüöÄüöÄ"
    - *preparing-ssh
  script:
    - *copying-deployment-files
    - *deploying-app
    - echo -e "üéâüéâüéâ \e[42m${CI_COMMIT_REF_NAME} successfully deployed on ${TARGETED_ENVIRONNEMENT_URL}\e[0m üéâüéâüéâ"

strict-e2e-tests-deploy-manual:
  extends: [ .deploy-job ]
  stage: e2e-tests
  when: manual
  except:
    - develop
    - tags
  allow_failure: false
  variables: *e2e-test-config
  environment:
    name: Charge/Tests e2e
    url: https://${E2E_TESTS_TARGET_SERVER_URL}

strict-e2e-tests-deploy:
  extends: [ .deploy-job ]
  stage: e2e-tests
  when: always
  only:
    - develop
    - tags
  allow_failure: false
  variables: *e2e-test-config
  environment:
    name: Charge/Tests e2e
    url: https://${E2E_TESTS_TARGET_SERVER_URL}

tolerant-e2e-tests-deploy:
  extends: [ .deploy-job ]
  stage: e2e-tests
  allow_failure: false
  needs:
    #    must repeat package here because extends overwrites instead of merge properties
    - package
    - strict-e2e-tests-test
  only: [ develop ]
  variables: *e2e-test-config
  environment:
    name: Charge/Tests e2e
    url: https://${E2E_TESTS_TARGET_SERVER_URL}

acceptance-deploy-on-tag:
  extends: [ .deploy-job ]
  stage: deploy
  only: [ tags ]
  variables: *acceptance-config
  environment:
    name: Recette
    url: https://${ACCEPTANCE_TARGET_SERVER_URL}

acceptance-deploy-manual:
  extends: [ .deploy-job ]
  stage: deploy
  except: [ tags ]
  when: manual
  variables: *acceptance-config
  environment:
    name: Recette
    url: https://${ACCEPTANCE_TARGET_SERVER_URL}

dev-deploy:
  extends: [ .deploy-job ]
  stage: deploy
  rules:
    - if: $NIGHTLY == "NIGHTLY"
      when: always
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - when: manual
  variables: *dev-config
  environment:
    name: Dev
    url: https://${DEV_TARGET_SERVER_URL}

# </editor-fold desc="Deploy">

# <editor-fold desc="E2e tests">

strict-e2e-tests-test:
  image: markhobson/maven-chrome:jdk-11
  stage: e2e-tests
  needs:
    - job: strict-e2e-tests-deploy
      optional: true
    - job: strict-e2e-tests-deploy-manual
      optional: true
  allow_failure: false
  script:
    - echo "Test ${CI_COMMIT_REF_NAME} deployed on ${E2E_TESTS_TARGET_SERVER_URL} with Karate - These tests mustn't fail"
    - ./gradlew test -Dkarate.options="--tags ${KARATE_TAGS} --tags ~@fixme-ip" -Dkarate.headless=true -Dkarate.baseUrl="https://${E2E_TESTS_TARGET_SERVER_URL}" -Dkarate.chromeBin=/opt/google/chrome/google-chrome
  artifacts:
    when: always
    name: "Karate - tests strict"
    paths:
      - build/karate-reports

tolerant-e2e-tests-test:
  image: markhobson/maven-chrome:jdk-11
  stage: e2e-tests
  needs: [ tolerant-e2e-tests-deploy ]
  only: [ develop ]
  allow_failure: true
  script:
    - echo "Test IP ${CI_COMMIT_REF_NAME} deployed on ${E2E_TESTS_TARGET_SERVER_URL} with Karate - Some of these tests could fail. There are known problems and should be correspond to issues in gitlab."
    - ./gradlew test -Dkarate.options="--tags ${KARATE_TAGS}" -Dkarate.headless=true -Dkarate.baseUrl="https://${E2E_TESTS_TARGET_SERVER_URL}" -Dkarate.chromeBin=/opt/google/chrome/google-chrome
  artifacts:
    when: always
    name: "Karate - tests tolerant"
    paths:
      - build/karate-reports

# </editor-fold desc="E2e tests">
