#
# i-Parapheur Web
# Copyright (C) 2019-2022 Libriciel-SCOP
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

stages:
  - test
  - package
  - publish
  - deploy
  - e2e-tests

variables:
  PACKAGE_NAME: iparapheur-${CI_COMMIT_REF_NAME}
  PACKAGE_NAME_WITH_EXTENSION: ${PACKAGE_NAME}.tar.gz
  IPARAPHEUR_DOCKER_ELEMENTS_PATH: "/opt/iParapheur"

# <editor-fold desc="Test">


# FIXME : That would be nice to perform the pull, to check the images existences, at least
# pull:
#  stage: test
#  script:
#    - cp .env.dist .env
#    - docker-compose build .


# </editor-fold desc="Test">

# <editor-fold desc="Package">

.prepare-package: &prepare-package
  script:
    - echo "Packaging ${PACKAGE_NAME}"
    - prodFiles=(
      "docker-compose.yml"
      "docker-compose.ipng.yml"
      ".env.dist"
      "LICENSE.md"
      "README.md"
      "src/main/resources/nginx/iparapheur.conf.template"
      "src/main/resources/nginx/iparapheur.init.conf.template"
      "src/main/resources/content"
      "src/main/resources/postgres/docker-entrypoint-initdb.d"
      "src/main/resources/keycloak"
      "src/main/resources/prometheus/alert.rules"
      "src/main/resources/prometheus/prometheus.yml"
      "src/main/resources/rgpd/rgpd-template.json"
      "src/main/resources/vault"
      )
    - tar cfz ${PACKAGE_NAME_WITH_EXTENSION} --files-from <(printf "%s\n" "${prodFiles[@]}")

package_prod:
  stage: package
  only:
    - tags
  <<: *prepare-package
  artifacts:
    name: ${PACKAGE_NAME}
    paths:
      - ${PACKAGE_NAME_WITH_EXTENSION}

package:
  stage: package
  except:
    - tags
  <<: *prepare-package
  artifacts:
    name: ${PACKAGE_NAME}
    paths:
      - ${PACKAGE_NAME_WITH_EXTENSION}
    expire_in: 30 days

# </editor-fold desc="Package">

# <editor-fold desc="Publish">

.publish-package: &publish-package
  script:
    - echo "Publishing ${PACKAGE_NAME_WITH_EXTENSION} to https://${NEXUS_HOST}/repository/${NEXUS_FINAL_PATH}/${PACKAGE_NAME_WITH_EXTENSION}"
    - curl -v -u ${REGISTRY_CONTAINER_USER}:${REGISTRY_CONTAINER_PASSWORD} --upload-file ${PACKAGE_NAME_WITH_EXTENSION} https://${NEXUS_HOST}/repository/${NEXUS_FINAL_PATH}/${PACKAGE_NAME_WITH_EXTENSION}

publish_prod:
  stage: publish
  only:
    - tags
  <<: *publish-package
  variables:
    NEXUS_FINAL_PATH: ${NEXUS_PUBLIC_PATH}

publish:
  stage: publish
  except:
    - tags
  <<: *publish-package
  when: manual
  variables:
    NEXUS_FINAL_PATH: ${NEXUS_PRIVATE_PATH}

# </editor-fold desc="Publish">

# <editor-fold desc="Deploy">

.deploy-job:
  variables:
    INIT_SCRIPT: "ip5-compose-dev.sh"
    APPLY_COMMAND: "ssh -tt ${TARGETED_ENVIRONNEMENT_USER}@${TARGETED_ENVIRONNEMENT_URL}"
  environment:
    name: test-e2e
    url: https://${TARGETED_ENVIRONNEMENT_URL}
  script:
    - echo "Deploying ${CI_COMMIT_REF_NAME} on ${TARGETED_ENVIRONNEMENT_URL}"
    - echo "Preparing ssh agent"
    - eval $(ssh-agent -s)
    - ssh-add <(echo "${SSH_PRIVATE_KEY_B64}" | base64 --decode)
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - scp ./${PACKAGE_NAME_WITH_EXTENSION} ${TARGETED_ENVIRONNEMENT_USER}@${TARGETED_ENVIRONNEMENT_URL}:${IPARAPHEUR_DOCKER_ELEMENTS_PATH}/${PACKAGE_NAME_WITH_EXTENSION}
    - ${APPLY_COMMAND} "sudo tar -xf ${IPARAPHEUR_DOCKER_ELEMENTS_PATH}/${PACKAGE_NAME_WITH_EXTENSION} --directory ${IPARAPHEUR_DOCKER_ELEMENTS_PATH}"
    - scp ./${INIT_SCRIPT} ${TARGETED_ENVIRONNEMENT_USER}@${TARGETED_ENVIRONNEMENT_URL}:${IPARAPHEUR_DOCKER_ELEMENTS_PATH}/${INIT_SCRIPT}
    - scp ./docker-compose.override.init.yml ${TARGETED_ENVIRONNEMENT_USER}@${TARGETED_ENVIRONNEMENT_URL}:${IPARAPHEUR_DOCKER_ELEMENTS_PATH}/docker-compose.override.init.yml
    - scp ./docker-compose.override.tests-linux.yml ${TARGETED_ENVIRONNEMENT_USER}@${TARGETED_ENVIRONNEMENT_URL}:${IPARAPHEUR_DOCKER_ELEMENTS_PATH}/docker-compose.override.tests-linux.yml
    - ${APPLY_COMMAND} "mkdir -p ${IPARAPHEUR_DOCKER_ELEMENTS_PATH}/src/main/resources/core"
    - scp ./src/main/resources/core/application-dev.yml ${TARGETED_ENVIRONNEMENT_USER}@${TARGETED_ENVIRONNEMENT_URL}:${IPARAPHEUR_DOCKER_ELEMENTS_PATH}/src/main/resources/core/application-dev.yml
    - ${APPLY_COMMAND} "sudo chmod 770 ${IPARAPHEUR_DOCKER_ELEMENTS_PATH}/${INIT_SCRIPT}"
    - ${APPLY_COMMAND} "sudo chgrp deployment ${IPARAPHEUR_DOCKER_ELEMENTS_PATH}/${INIT_SCRIPT}"
    - echo "Deploying application..."
    - ${APPLY_COMMAND} "cd ${IPARAPHEUR_DOCKER_ELEMENTS_PATH} && docker-compose down --volumes --remove-orphan"
    - ${APPLY_COMMAND} "cd ${IPARAPHEUR_DOCKER_ELEMENTS_PATH} && docker-compose pull"
    - ${APPLY_COMMAND} "cd ${IPARAPHEUR_DOCKER_ELEMENTS_PATH} && sudo ${IPARAPHEUR_DOCKER_ELEMENTS_PATH}/${INIT_SCRIPT} setup --force --ignore-override-compose --dont-start-app"
    - ${APPLY_COMMAND} "cd ${IPARAPHEUR_DOCKER_ELEMENTS_PATH} && docker-compose -f docker-compose.yml -f docker-compose.override.tests-linux.yml up -d"
    - x=1; while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' https://${TARGETED_ENVIRONNEMENT_URL}/api/actuator/info)" != "200" && $x -le 60 ]]; do sleep 5; echo $(( x++ )); done || false
    - if [[ "$(curl -s -o /dev/null -w ''%{http_code}'' https://${TARGETED_ENVIRONNEMENT_URL}/api/actuator/info)" != "200" ]]; then echo "Application not started"; exit 1; fi
    - echo "Application successfully deployed."

strict-e2e-tests-deploy-manual:
  extends:
    - .deploy-job
  stage: e2e-tests
  when: manual
  except:
    - develop
    - tags
  allow_failure: false
  variables:
    TARGETED_ENVIRONNEMENT_URL: ${E2E_TESTS_TARGET_SERVER_URL}
    TARGETED_ENVIRONNEMENT_USER: ${E2E_TESTS_TARGET_SERVER_USER}
    SSH_PRIVATE_KEY_B64: ${E2E_TESTS_SSH_PRIVATE_KEY_B64}

strict-e2e-tests-deploy:
  extends:
    - .deploy-job
  stage: e2e-tests
  when: always
  only:
    - develop
    - tags
  allow_failure: false
  variables:
    TARGETED_ENVIRONNEMENT_URL: ${E2E_TESTS_TARGET_SERVER_URL}
    TARGETED_ENVIRONNEMENT_USER: ${E2E_TESTS_TARGET_SERVER_USER}
    SSH_PRIVATE_KEY_B64: ${E2E_TESTS_SSH_PRIVATE_KEY_B64}

tolerant-e2e-tests-deploy:
  extends:
    - .deploy-job
  stage: e2e-tests
  allow_failure: false
  needs:
    - package
    - strict-e2e-tests-test
  variables:
    TARGETED_ENVIRONNEMENT_URL: ${E2E_TESTS_TARGET_SERVER_URL}
    TARGETED_ENVIRONNEMENT_USER: ${E2E_TESTS_TARGET_SERVER_USER}
    SSH_PRIVATE_KEY_B64: ${E2E_TESTS_SSH_PRIVATE_KEY_B64}

acceptance-deploy:
  extends:
    - .deploy-job
  stage: deploy
  when: manual
  variables:
    TARGETED_ENVIRONNEMENT_URL: ${ACCEPTANCE_TARGET_SERVER_URL}
    TARGETED_ENVIRONNEMENT_USER: ${ACCEPTANCE_TARGET_SERVER_USER}
    SSH_PRIVATE_KEY_B64: ${ACCEPTANCE_SSH_PRIVATE_KEY_B64}

# </editor-fold desc="Deploy">

# <editor-fold desc="E2e tests">

strict-e2e-tests-test:
  image: markhobson/maven-chrome:jdk-11
  stage: e2e-tests
  needs:
    - job: strict-e2e-tests-deploy
      optional: true
    - job: strict-e2e-tests-deploy-manual
      optional: true

  allow_failure: false
  script:
    - echo "Test ${CI_COMMIT_REF_NAME} deployed on ${TARGET_E2E_TESTS_SERVER_URL} with Karate - These tests mustn't fail"
    - ./gradlew test -Dkarate.options="--tags ${KARATE_TAGS} --tags ~@fixme-ip" -Dkarate.headless=true -Dkarate.baseUrl="https://${TARGET_E2E_TESTS_SERVER_URL}" -Dkarate.chromeBin=/opt/google/chrome/google-chrome
  artifacts:
    when: always
    name: "Karate - tests strict"
    paths:
      - build/karate-reports

tolerant-e2e-tests-test:
  image: markhobson/maven-chrome:jdk-11
  stage: e2e-tests
  needs: [ tolerant-e2e-tests-deploy ]
  allow_failure: true
  script:
    - echo "Test IP ${CI_COMMIT_REF_NAME} deployed on ${TARGET_E2E_TESTS_SERVER_URL} with Karate - Some of these tests could fail. There are known problems and should be correspond to issues in gitlab."
    - ./gradlew test -Dkarate.options="--tags ${KARATE_TAGS}" -Dkarate.headless=true -Dkarate.baseUrl="https://${TARGET_E2E_TESTS_SERVER_URL}" -Dkarate.chromeBin=/opt/google/chrome/google-chrome
  artifacts:
    when: always
    name: "Karate - tests tolerant"
    paths:
      - build/karate-reports

# </editor-fold desc="E2e tests">
