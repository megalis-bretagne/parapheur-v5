#
# iparapheur
# Copyright (C) 2019-2023 Libriciel-SCOP
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

stages:
  - package
  - publish
  - deploy
  - e2e-tests-setup
  - e2e-tests-strict
  - e2e-tests-tolerant

variables:
  NIGHTLY:
    value: "FALSE"
    description: "If set to TRUE, will start the nightly jobs"
  FORCE_RESET_DATA:
    value: "FALSE"
    description: "If set to TRUE, deploy jobs will wipe data even if it normally don't (acceptance, dev)"
  PACKAGE_NAME: iparapheur-${CI_COMMIT_REF_NAME}
  PACKAGE_NAME_WITH_EXTENSION: ${PACKAGE_NAME}.tar.gz
  SERVER_CURRENT_PATH: "/opt/iparapheur/current"
  SERVER_SIMLINK_PATH: "/opt/iparapheur/dist"
  SERVER_DIST_PATH: "/opt/iparapheur/dist-${CI_COMMIT_REF_NAME}"
  INIT_SCRIPT: "ip5-compose-dev.sh"
  DOCKER_COMPOSE_OVERRIDE_FILE_FOR_TAG: ""


.e2e-test-config:
  variables: &e2e-test-config
    TARGETED_ENVIRONNEMENT_URL: ${E2E_TESTS_TARGET_SERVER_URL}
    TARGETED_ENVIRONNEMENT_USER: ${E2E_TESTS_TARGET_SERVER_USER}
    SSH_PRIVATE_KEY_B64: ${E2E_TESTS_SSH_PRIVATE_KEY_B64}
    RESET_DATA: "TRUE"
    OVERWRITE_ADMIN_PASSWORD: "TRUE"
    OVERRIDE_DOCKER_COMPOSE_FILE: "docker-compose.override.dev.yml"
    SERVER_DIST_PATH: "/opt/iparapheur/dist-${CI_COMMIT_REF_NAME}-${CI_JOB_STARTED_AT}"
  environment: &e2e-test-environment
    name: Charge/Tests e2e
    url: https://${E2E_TESTS_TARGET_SERVER_URL}

.acceptance-config:
  variables: &acceptance-config
    TARGETED_ENVIRONNEMENT_URL: ${ACCEPTANCE_TARGET_SERVER_URL}
    TARGETED_ENVIRONNEMENT_USER: ${ACCEPTANCE_TARGET_SERVER_USER}
    SSH_PRIVATE_KEY_B64: ${ACCEPTANCE_SSH_PRIVATE_KEY_B64}
    RESET_DATA: "FALSE"
  environment: &acceptance-environment
    name: Recette
    url: https://${ACCEPTANCE_TARGET_SERVER_URL}

.dev-config:
  variables: &dev-config
    TARGETED_ENVIRONNEMENT_URL: ${DEV_TARGET_SERVER_URL}
    TARGETED_ENVIRONNEMENT_USER: ${DEV_TARGET_SERVER_USER}
    SSH_PRIVATE_KEY_B64: ${DEV_SSH_PRIVATE_KEY_B64}
    RESET_DATA: "FALSE"
    SERVER_DIST_PATH: "/opt/iparapheur/dist-${CI_COMMIT_REF_NAME}-${CI_JOB_STARTED_AT}"
  environment: &dev-environment
    name: Dev
    url: https://${DEV_TARGET_SERVER_URL}

.formation-config:
  variables: &formation-config
    TARGETED_ENVIRONNEMENT_URL: ${FORMATION_TARGET_SERVER_URL}
    TARGETED_ENVIRONNEMENT_USER: ${FORMATION_TARGET_SERVER_USER}
    SSH_PRIVATE_KEY_B64: ${FORMATION_SSH_PRIVATE_KEY_B64}
    RESET_DATA: "FALSE"
  environment: &formation-environment
    name: Formation
    url: https://${FORMATION_TARGET_SERVER_URL}

.test-config:
  variables: &test-config
    TARGETED_ENVIRONNEMENT_URL: ${TEST_TARGET_SERVER_URL}
    TARGETED_ENVIRONNEMENT_USER: ${TEST_TARGET_SERVER_USER}
    SSH_PRIVATE_KEY_B64: ${TEST_SSH_PRIVATE_KEY_B64}
    RESET_DATA: "FALSE"
  environment: &test-environment
    name: Test
    url: https://${TEST_TARGET_SERVER_URL}

.partner-config:
  variables: &partner-config
    TARGETED_ENVIRONNEMENT_URL: ${PARTNER_TARGET_SERVER_URL}
    TARGETED_ENVIRONNEMENT_USER: ${PARTNER_TARGET_SERVER_USER}
    SSH_PRIVATE_KEY_B64: ${PARTNER_SSH_PRIVATE_KEY_B64}
    RESET_DATA: "FALSE"
  environment: &partner-environment
    name: Partenaires
    url: https://${PARTNER_TARGET_SERVER_URL}

# <editor-fold desc="Package">

.prepare-package: &prepare-package
  script:
    - echo -e "üì¶üì¶üì¶ \e[42mPackaging ${PACKAGE_NAME}\e[0m üì¶üì¶üì¶"
    - sed -i "s/%CI_COMMIT_REF_NAME%/$CI_COMMIT_REF_NAME/g" docker-compose.yml
    - mkdir ${PACKAGE_NAME}
    - >
      mv -t ${PACKAGE_NAME} \
         docker-compose.yml \
         docker-compose.override.init.yml \
         backup.sh \
         cron.sh \
         .env.dist \
         CHANGELOG.md \
         LICENSE.md \
         README.md
    - mkdir ${PACKAGE_NAME}/docker-resources
    - >
      mv -t ${PACKAGE_NAME}/docker-resources \
         src/main/resources/nginx/iparapheur.init.conf.template
    - tar cfz ${PACKAGE_NAME_WITH_EXTENSION} ${PACKAGE_NAME}

package_prod:
  stage: package
  only: [ tags ]
  <<: *prepare-package
  artifacts:
    name: ${PACKAGE_NAME}
    paths:
      - ${PACKAGE_NAME_WITH_EXTENSION}

package:
  stage: package
  except: [ tags ]
  <<: *prepare-package
  artifacts:
    name: ${PACKAGE_NAME}
    paths:
      - ${PACKAGE_NAME_WITH_EXTENSION}
    # When https://gitlab.com/gitlab-org/gitlab-runner/-/issues/6412 is solved, package and package_prod should be merged
    expire_in: 30 days

# </editor-fold desc="Package">

# <editor-fold desc="Publish">

publish:
  stage: publish
  needs:
    - job: package
      optional: true
    - job: package_prod
      optional: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_COMMIT_TAG != null
      when: always
      variables:
        NEXUS_FINAL_PATH: ${NEXUS_PUBLIC_PATH}
    - when: manual
      variables:
        NEXUS_FINAL_PATH: ${NEXUS_PRIVATE_PATH}
  script:
    - echo "Publishing ${PACKAGE_NAME_WITH_EXTENSION} to https://${NEXUS_HOST}/repository/${NEXUS_FINAL_PATH}/${PACKAGE_NAME_WITH_EXTENSION}"
    - curl -v -u ${REGISTRY_CONTAINER_USER}:${REGISTRY_CONTAINER_PASSWORD} --upload-file ${PACKAGE_NAME_WITH_EXTENSION} https://${NEXUS_HOST}/repository/${NEXUS_FINAL_PATH}/${PACKAGE_NAME_WITH_EXTENSION}

# </editor-fold desc="Publish">

# <editor-fold desc="Deploy">

.preparing-ssh: &preparing-ssh
  - echo -e "üïµüèΩ \e[46mPreparing ssh agent\e[0m üïµüèΩ"
  - eval $(ssh-agent -s)
  - ssh-add <(echo "${SSH_PRIVATE_KEY_B64}" | base64 --decode)
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'

.copying-deployment-files: &copying-deployment-files
  - echo -e "üì§ \e[46mCopying and extracting ${PACKAGE_NAME_WITH_EXTENSION}, ${INIT_SCRIPT} and ${OVERRIDE_DOCKER_COMPOSE_FILE} to ${TARGETED_ENVIRONNEMENT_USER}@${TARGETED_ENVIRONNEMENT_URL}:${SERVER_DIST_PATH}/\e[0m üì§"
  - scp ./${PACKAGE_NAME_WITH_EXTENSION} ${TARGETED_ENVIRONNEMENT_USER}@${TARGETED_ENVIRONNEMENT_URL}:${SERVER_DIST_PATH}/${PACKAGE_NAME_WITH_EXTENSION}
  - ${APPLY_COMMAND} "sudo tar -zxf ${SERVER_DIST_PATH}/${PACKAGE_NAME_WITH_EXTENSION}"
  - ${APPLY_COMMAND} "mv ${PACKAGE_NAME} ${SERVER_DIST_PATH}"
  - scp ./${INIT_SCRIPT} ${TARGETED_ENVIRONNEMENT_USER}@${TARGETED_ENVIRONNEMENT_URL}:${SERVER_DIST_PATH}/${INIT_SCRIPT}
  - ${APPLY_COMMAND} "sudo chmod 770 ${SERVER_DIST_PATH}/${INIT_SCRIPT}"
  - ${APPLY_COMMAND} "sudo chgrp deployment ${SERVER_DIST_PATH}/${INIT_SCRIPT}"
  - ${APPLY_COMMAND} "unlink ${SERVER_SIMLINK_PATH}"
  - ${APPLY_COMMAND} "ln -s --relative ${SERVER_DIST_PATH} ${SERVER_SIMLINK_PATH}"
  - if [[ ! -z ${OVERRIDE_DOCKER_COMPOSE_FILE} ]]; then scp ./${OVERRIDE_DOCKER_COMPOSE_FILE} ${TARGETED_ENVIRONNEMENT_USER}@${TARGETED_ENVIRONNEMENT_URL}:${SERVER_CURRENT_PATH}/docker-compose.override.yml; fi


.deploying-app: &deploying-app
  - echo -e "üöÄ \e[46mDeploying application using ${OVERRIDE_DOCKER_COMPOSE_FILE}\e[0m üöÄ"
  - if [[ ${FORCE_RESET_DATA} == "TRUE" && ${RESET_DATA} == "FALSE" ]]; then echo -e "üßπ‚ö†Ô∏è \e[41mData will be reset\e[0m ‚ö†Ô∏èüßπ"; fi
  - if [[ ${OVERWRITE_ADMIN_PASSWORD} == "TRUE" ]]; then ${APPLY_COMMAND} "sed -i -E 's/INITIAL_IPARAPHEUR_ADMIN_PASSWORD=(.*)/INITIAL_IPARAPHEUR_ADMIN_PASSWORD=${E2E_TESTS_INITIAL_ADMIN_PWD}/g' ${SERVER_CURRENT_PATH}/.env"; fi
  - ${APPLY_COMMAND} "cd ${SERVER_CURRENT_PATH} && docker compose down --volumes --remove-orphans"
  - ${APPLY_COMMAND} "docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}"
  - ${APPLY_COMMAND} "cd ${SERVER_CURRENT_PATH} && docker compose ${DOCKER_COMPOSE_FILES[@]} pull"
  - if [[ ${FORCE_RESET_DATA} == "TRUE" || ${RESET_DATA} == "TRUE" ]]; then ${APPLY_COMMAND} "cd ${SERVER_CURRENT_PATH} && sudo ${SERVER_CURRENT_PATH}/${INIT_SCRIPT} setup --force --ignore-override-compose --dont-start-app"; fi
  - ${APPLY_COMMAND} "cd ${SERVER_CURRENT_PATH} && docker compose ${DOCKER_COMPOSE_FILES[@]} up -d"
  - echo -e "‚è≥Ô∏è \e[46mWaiting for the application to be up\e[0m ‚åõÔ∏èÔ∏è"
  - x=1; while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' https://${TARGETED_ENVIRONNEMENT_URL}/api/actuator/info)" != "200" && $x -le 60 ]]; do sleep 5; echo ‚åõÔ∏èÔ∏è $(( x++ )) ‚è≥; done || false
  - if [[ "$(curl -s -o /dev/null -w ''%{http_code}'' https://${TARGETED_ENVIRONNEMENT_URL}/api/actuator/info)" != "200" ]]; then echo -e "‚ù§Ô∏è‚Äçü©π‚ù§Ô∏è‚Äçü©π‚ù§Ô∏è‚Äçü©π \e[41mApplication not started\e[0m ‚ù§Ô∏è‚Äçü©π‚ù§Ô∏è‚Äçü©π‚ù§Ô∏è‚Äçü©π"; exit 1; fi

.deploy-job:
  variables:
    APPLY_COMMAND: "ssh -tt ${TARGETED_ENVIRONNEMENT_USER}@${TARGETED_ENVIRONNEMENT_URL}"
  needs:
    - job: package
      optional: true
    - job: package_prod
      optional: true
  before_script:
    - echo -e "üöÄüöÄüöÄ \e[42mDeploying ${CI_COMMIT_REF_NAME} on ${TARGETED_ENVIRONNEMENT_URL} with user ${TARGETED_ENVIRONNEMENT_USER}\e[0m üöÄüöÄüöÄ"
    - *preparing-ssh
  script:
    - *copying-deployment-files
    - *deploying-app
    - echo -e "üéâüéâüéâ \e[42m${CI_COMMIT_REF_NAME} successfully deployed on ${TARGETED_ENVIRONNEMENT_URL}\e[0m üéâüéâüéâ"

strict-e2e-tests-deploy:
  extends: [ .deploy-job ]
  stage: deploy
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $NIGHTLY == "TRUE"
      when: always
    - if: $CI_COMMIT_BRANCH == 'develop'
      when: always
    - if: $CI_COMMIT_TAG != null
      when: always
      variables:
        OVERRIDE_DOCKER_COMPOSE_FILE: ${DOCKER_COMPOSE_OVERRIDE_FILE_FOR_TAG}
    - when: manual
  allow_failure: false
  variables: *e2e-test-config
  environment: *e2e-test-environment

#tolerant-e2e-tests-deploy:
#  extends: [ .deploy-job ]
#  stage: deploy-tolerant-tests
#  rules:
#    - if: $CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_TAG != null
#      when: never
#    - if: $NIGHTLY == "TRUE"
#      when: manual
#    - if: $CI_COMMIT_BRANCH == 'develop'
#      when: manual
#    - when: manual
#  needs:
#    #    must repeat package here because extends overwrites instead of merge properties
#    - job: package
#      optional: true
#    - job: package_prod
#      optional: true
#    - strict-e2e-tests-test
#  allow_failure: false
#  variables: *e2e-test-config
#  environment: *e2e-test-environment

acceptance-deploy:
  extends: [ .deploy-job ]
  stage: deploy
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_COMMIT_TAG != null
      when: always
    - when: manual
  variables: *acceptance-config
  environment: *acceptance-environment

dev-deploy:
  extends: [ .deploy-job ]
  stage: deploy
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $NIGHTLY == "TRUE"
      when: always
    - when: manual
  variables: *dev-config
  environment: *dev-environment

formation-deploy:
  extends: [ .deploy-job ]
  stage: deploy
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_COMMIT_TAG != null
      when: manual
    - when: manual
  variables: *formation-config
  environment: *formation-environment

test-deploy:
  extends: [ .deploy-job ]
  stage: deploy
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_COMMIT_TAG != null
      when: manual
    - when: manual
  variables: *test-config
  environment: *test-environment

partner-deploy:
  extends: [ .deploy-job ]
  stage: deploy
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_COMMIT_TAG != null
      when: manual
    - when: manual
  variables: *partner-config
  environment: *partner-environment

# </editor-fold desc="Deploy">

# <editor-fold desc="E2e tests">

.e2e-tests:
  image: markhobson/maven-chrome:jdk-11
  variables:
    LANG: fr_FR.UTF-8
  stage: e2e-tests
  script:
    - set -eo pipefail
    - apt-get update && apt-get install --assume-yes --no-install-recommends --show-upgraded libpoppler118=22.02.* libxml2-utils=2.9.* locales=2.35-* locales-all=2.35-* python3-pip=22.0.* poppler-utils=22.02.* xmlsec1=1.2.* zip=3.0-12build2 && pip3 install jsonpath-ng==1.5.3 Pillow==9.2.0 PyPDF2==2.10.0 && locale-gen fr_FR.UTF-8
    - echo "Test ${CI_COMMIT_REF_NAME} deployed on ${E2E_TESTS_TARGET_SERVER_URL} with Karate - These tests mustn't fail"
    - ./gradlew test -Dkarate.options="${KARATE_ADDITIONAL_TAGS}" -Dkarate.adminUserPwd="${E2E_TESTS_INITIAL_ADMIN_PWD}" -Dkarate.headless=true -Dkarate.baseUrl="https://${E2E_TESTS_TARGET_SERVER_URL}" -Dkarate.chromeBin=/opt/google/chrome/google-chrome
    - python3 src/scripts/karate-tests-fixme-ip-tag.py | tee build/karate-tests-fixme-ip-tag.txt
  after_script:
    - if [ ! -f build/karate-tests-fixme-ip-tag.txt ] ; then python3 src/scripts/karate-tests-fixme-ip-tag.py | tee build/karate-tests-fixme-ip-tag.txt ; fi
  artifacts:
    when: always
    name: ${REPORT_NAME}
    paths:
      - build/ip5-folders
      - build/karate-reports
      - build/karate-tests-fixme-ip-tag.txt

setup-e2e-tests:
  extends: [ .e2e-tests ]
  stage: e2e-tests-setup
  variables:
    REPORT_NAME: "Karate - tests strict - ${KARATE_TEST_SET}"
    KARATE_ADDITIONAL_TAGS: "--tags @before --tags ~@ignore "
  needs:
    - job: strict-e2e-tests-deploy
      optional: true
  allow_failure: false

strict-e2e-tests:
  extends: [ .e2e-tests ]
  stage: e2e-tests-strict
  variables:
    REPORT_NAME: "Karate - tests strict - ${KARATE_TEST_SET}"
    KARATE_ADDITIONAL_TAGS: "--tags @ip5 --tags @${KARATE_TEST_SET} --tags ~@fixme-ip5 --tags ~@ignore "
  needs:
    - job: setup-e2e-tests
      optional: true
  allow_failure: false
  parallel:
    matrix:
      - KARATE_TEST_SET: [ "demo-simple-bde", "formats-de-signature", "legacy-bridge", "metadonnees" ]

tolerant-e2e-tests:
  extends: [ .e2e-tests ]
  stage: e2e-tests-tolerant
  variables:
    REPORT_NAME: "Karate - tests tolerant - ${KARATE_TEST_SET}"
    KARATE_ADDITIONAL_TAGS: "--tags @ip5 --tags @${KARATE_TEST_SET} --tags @fixme-ip5 --tags ~@ignore "
  needs: [ strict-e2e-tests ]
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_TAG != null
      when: never
    - when: manual
  allow_failure: true
  parallel:
    matrix:
      - KARATE_TEST_SET: [ "demo-simple-bde", "formats-de-signature", "legacy-bridge", "metadonnees" ]

# </editor-fold desc="E2e tests">
