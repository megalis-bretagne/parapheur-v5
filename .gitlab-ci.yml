#
# i-Parapheur Web
# Copyright (C) 2019-2022 Libriciel-SCOP
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

stages:
  - test
  - package
  - publish

variables:
  PACKAGE_NAME: iparapheur-${CI_COMMIT_REF_NAME}
  PACKAGE_NAME_WITH_EXTENSION: ${PACKAGE_NAME}.tar.gz
# <editor-fold desc="Test">


# FIXME : That would be nice to perform the pull, to check the images existences, at least
# pull:
#  stage: test
#  script:
#    - cp .env.dist .env
#    - docker-compose build .


# </editor-fold desc="Test">


# <editor-fold desc="Package">

.prepare-package: &prepare-package
  script:
    - echo "Packaging ${PACKAGE_NAME}"
    - prodFiles=(
      "docker-compose.yml"
      "docker-compose.ipng.yml"
      ".env.dist"
      "LICENSE.md"
      "README.md"
      "src/main/resources/nginx/iparapheur.conf.template"
      "src/main/resources/content"
      "src/main/resources/postgres/docker-entrypoint-initdb.d"
      "src/main/resources/keycloak"
      "src/main/resources/prometheus/alert.rules"
      "src/main/resources/prometheus/prometheus.yml"
      "src/main/resources/rgpd/rgpd-template.json"
      "src/main/resources/vault"
      )
    - tar cfz ${PACKAGE_NAME_WITH_EXTENSION} --files-from <(printf "%s\n" "${prodFiles[@]}")

package_prod:
  stage: package
  only:
    - tags
  <<: *prepare-package
  artifacts:
    name: ${PACKAGE_NAME}
    paths:
      - ${PACKAGE_NAME_WITH_EXTENSION}

package:
  stage: package
  except:
    - tags
  <<: *prepare-package
  artifacts:
    name: ${PACKAGE_NAME}
    paths:
      - ${PACKAGE_NAME_WITH_EXTENSION}
    expire_in: 30 days

# </editor-fold desc="Package">

# <editor-fold desc="Publish">

.publish-package: &publish-package
  script:
    - echo "Publishing ${PACKAGE_NAME_WITH_EXTENSION} to https://${NEXUS_HOST}/repository/${NEXUS_FINAL_PATH}/${PACKAGE_NAME_WITH_EXTENSION}"
    - curl -v -u ${REGISTRY_CONTAINER_USER}:${REGISTRY_CONTAINER_PASSWORD} --upload-file ${PACKAGE_NAME_WITH_EXTENSION} https://${NEXUS_HOST}/repository/${NEXUS_FINAL_PATH}/${PACKAGE_NAME_WITH_EXTENSION}

publish_prod:
  stage: publish
  only:
    - tags
  <<: *publish-package
  variables:
    NEXUS_FINAL_PATH: ${NEXUS_PUBLIC_PATH}

publish:
  stage: publish
  except:
    - tags
  <<: *publish-package
  when: manual
  variables:
    NEXUS_FINAL_PATH: ${NEXUS_PRIVATE_PATH}

# </editor-fold desc="Publish">
